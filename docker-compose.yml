version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
    ports:
      - "8000:8000"
    restart: always
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,https://lanitas.esmosolutions.es,http://localhost:8000
      - DB_NAME=inventory
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
    volumes:
      - ./:/app
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - db
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://backend:8000
    # frontend will run the Next.js node server internally on 3000;
    # we expose it only to the internal Docker network and let nginx proxy requests to it.
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
    # For production, we don't need source code volume mounted
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    depends_on:
      - backend
    networks:
      - app-network

  proxy:
    image: nginx:stable-alpine
    restart: always
    ports:
      - "1211:8081"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=inventory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5435:5432"
    networks:
      - app-network

volumes:
  postgres_data:


networks:
  app-network:
    driver: bridge
